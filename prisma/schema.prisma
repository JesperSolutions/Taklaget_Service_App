// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Parent group that owns multiple companies
model ParentGroup {
  id        String    @id @default(uuid())
  name      String
  code      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  companies Company[]
}

// Company that performs inspections
model Company {
  id           String        @id @default(uuid())
  name         String
  code         String        @unique
  address      String?
  phone        String?
  email        String?
  parentGroup  ParentGroup   @relation(fields: [parentGroupId], references: [id])
  parentGroupId String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  departments  Department[]
  inspectors   Inspector[]
  reports      Report[]
  users        AuthUser[]
}

// Authentication users
model AuthUser {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String
  role          String    @default("employee")
  company       Company   @relation(fields: [companyId], references: [id])
  companyId     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("auth_users")
}

// Department within a company
model Department {
  id        String    @id @default(uuid())
  name      String
  code      String
  company   Company   @relation(fields: [companyId], references: [id])
  companyId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  reports   Report[]

  @@unique([companyId, code])
}

// Inspector who performs roof inspections
model Inspector {
  id        String    @id @default(uuid())
  name      String
  code      String
  email     String?
  phone     String?
  company   Company   @relation(fields: [companyId], references: [id])
  companyId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  reports   Report[]

  @@unique([companyId, code])
}

// Customer who receives the inspection
model Customer {
  id        String    @id @default(uuid())
  name      String
  address   String
  city      String
  state     String?
  zipCode   String
  phone     String?
  email     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  reports   Report[]
}

// Report generated from an inspection
model Report {
  id            String         @id @default(uuid())
  reportCode    String         @unique
  inspectionDate DateTime
  notes         String?
  status        String         @default("DRAFT") // DRAFT, SUBMITTED, APPROVED, REJECTED
  inspector     Inspector      @relation(fields: [inspectorId], references: [id])
  inspectorId   String
  company       Company        @relation(fields: [companyId], references: [id])
  companyId     String
  department    Department     @relation(fields: [departmentId], references: [id])
  departmentId  String
  customer      Customer       @relation(fields: [customerId], references: [id])
  customerId    String
  checklist     Checklist?    // One-to-one relation with checklist
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  findings      Finding[]
}

// Checklist for standardized inspection items
model Checklist {
  id                      String   @id @default(uuid())
  report                  Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId                String   @unique
  accessConditions        String   // IKKE_RELEVANT, IKKE_ETABLERET, ETABLERET
  accessComments         String?
  fallProtection         String   // IKKE_RELEVANT, IKKE_ETABLERET, ETABLERET
  fallProtectionComments String?
  existingRoofMaterial   String?
  roofAge               Int?
  roofArea              Float?    // in square meters
  technicalExecution    String?
  welds                 String?
  drainage              String?
  edgesAndCrowns        String?
  skylights             String?
  technicalInstallations String?
  insulationType        String?
  greenRoof             String?
  solarPanels           String?
  noxTreatment          String   // IKKE_RELEVANT, IKKE_ETABLERET, ETABLERET
  rainwaterCollection   String   // IKKE_RELEVANT, IKKE_ETABLERET, ETABLERET
  recreationalAreas     String   // IKKE_RELEVANT, IKKE_ETABLERET, ETABLERET
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// Images attached to a finding
model ReportImage {
  id          String    @id @default(uuid())
  filename    String
  path        String
  mimetype    String
  size        Int
  comment     String?
  severity    String?   // LOW, MEDIUM, HIGH, CRITICAL
  finding     Finding   @relation(fields: [findingId], references: [id], onDelete: Cascade)
  findingId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Inspection findings
model Finding {
  id          String        @id @default(uuid())
  title       String
  description String
  severity    String        // LOW, MEDIUM, HIGH, CRITICAL
  report      Report        @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId    String
  images      ReportImage[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}